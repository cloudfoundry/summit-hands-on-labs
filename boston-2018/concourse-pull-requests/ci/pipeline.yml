---
#
# ci/pipeline.yml
#
# Pipeline structure file for a Go Project pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

meta:
  name:     (( concat "pr-lab-" meta.github.owner ))
  release:  (( concat meta.name " Release" ))
  pipeline: (( grab meta.name ))
  url:      https://ci.cfna2018.starkandwayne.com
  target:   cfna2018

  git:
    name:   Stark & Wayne CI
    email:  ci@starkandwayne.com

  go:
    version: 1.9
    module:  (( concat "github.com/" meta.github.owner "/" meta.github.repo ))
    cmd_module: (( grab meta.go.module ))
    binary:  (( grab meta.github.repo ))
    force_static_binary: false

  image:
    name: golang
    tag:  1.8-stretch

  github:
    uri:          (( concat "https://" meta.github.owner ":" meta.github.access_token "@github.com/" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         cfna2018-app
    branch:       master
    access_token: (( param "Please generate a Personal Access Token and specify it here" ))

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - test
      - rc
      - shipit

jobs:
  - name: test
    public: true
    serial: true
    plan:
      - do:
        - { get: git, trigger: true }
        - task: test
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: (( grab meta.image.name ))
                tag:        (( grab meta.image.tag ))
            inputs:
              - name: git
                path: code
            run:
              path: ./code/ci/scripts/test
              args: []
            params:
              MODULE: (( grab meta.go.module ))

  - name: rc
    public: true
    plan:
      - { get: git, trigger: true,  passed: [test] }

  - name: shipit
    public: true
    serial: true
    plan:
      - do:
        - name: inputs
          aggregate:
            - { get: git, passed: [rc] }
        - name: release
          task: release
          config:
            image_resource:
              type: docker-image
              source:
                repository: (( grab meta.image.name ))
                tag:        (( grab meta.image.tag ))
            platform: linux
            inputs:
              - name: git
                path: (( concat "gopath/src/" meta.go.module ))
            outputs:
              - name: gh
              - name: pushme
            run:
              path: (( concat "./gopath/src/" meta.go.module "/ci/scripts/shipit" ))
              args: []
            params:
              BINARY:       (( grab meta.go.binary ))
              REPO_ROOT:    (( concat "gopath/src/" meta.go.module ))
              RELEASE_NAME: (( grab meta.release ))
              RELEASE_ROOT: gh
              REPO_OUT:     pushme
              BRANCH:       (( grab meta.github.branch ))
              CMD_PKG:      (( grab meta.go.cmd_module ))
              STATIC_BINARY:  (( grab meta.go.force_static_binary ))
              GIT_EMAIL:      (( grab meta.git.email ))
              GIT_NAME:       (( grab meta.git.name ))
        - name: git
          put: git
          params:
            rebase: true
            repository: pushme/git
        - name: github
          put: github
          params:
            name:   gh/name
            tag:    gh/tag
            body:   gh/notes.md
            globs: [gh/artifacts/*]

resources:
  - name: git
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))
